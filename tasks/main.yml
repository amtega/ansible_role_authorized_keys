---
# Role tasks

- name: Setup authorized keys
  block:
    - name: Setup facts with authorized keys to manage
      ansible.builtin.set_fact:
        _authorized_keys_to_manage: >-
          {{ lookup("template", "authorized_keys.yml.j2") | from_yaml }}

    - name: Setup facts with authorized keys users to manage
      ansible.builtin.set_fact:
        _authorized_keys_users: >-
          {{ (_authorized_keys_to_manage
              | selectattr("user", "defined")
              | selectattr("path", "undefined")
              | map(attribute="user")
              | list
              + (authorized_keys_defaults.path is undefined)
                | ternary([authorized_keys_defaults.user
                           | default([])],
                          []))
             | flatten
             | unique
             | sort }}

    - name: Gather home directories
      ansible.builtin.shell: >-
        getent passwd {{ authorized_keys_user }} \
        | cut -d: -f6
      args:
        warn: no
      changed_when: no
      register: authorized_keys_gather_homes_result
      when: authorized_keys_item.path is not defined
      loop: "{{ _authorized_keys_users }}"
      loop_control:
        loop_var: authorized_keys_user
      no_log: "{{ authorized_keys_no_log }}"

    - name: Check home directories parent directories
      ansible.builtin.stat:
        path: "{{ authorized_keys_home_dir | dirname }}"
      register: authorized_keys_check_homes_base_dir_result
      loop: "{{ _authorized_keys_users }}"
      loop_control:
        loop_var: authorized_keys_user
        index_var: authorized_keys_index
      no_log: "{{ authorized_keys_no_log }}"

    - name: Check home directories
      ansible.builtin.stat:
        path: "{{ authorized_keys_home_dir }}"
      register: authorized_keys_check_homes_result
      loop: "{{ _authorized_keys_users }}"
      loop_control:
        loop_var: authorized_keys_user
        index_var: authorized_keys_index
      no_log: "{{ authorized_keys_no_log }}"

    - name: Setup home directories
      when: authorized_keys_home_dir | length > 0
      block:
        - name: Setup home directories parent directory
          ansible.builtin.file:
            state: directory
            path: "{{ authorized_keys_home_dir | dirname }}"
            owner: >-
              {{ authorized_keys_item.home_parent_dir_owner
                 | default(
                     authorized_keys_defaults.home_parent_dir_owner) }}
            group: >-
              {{ authorized_keys_item.home_parent_dir_group
                 | default(
                     authorized_keys_defaults.home_parent_dir_group) }}
            mode: >-
              {{ authorized_keys_item.home_parent_dir_mode
                 | default(
                     authorized_keys_defaults.home_parent_dir_mode) }}
          when: >-
            not authorized_keys_results[authorized_keys_index].stat.exists
            and authorized_keys_home_dir | dirname != "/"
          loop: "{{ _authorized_keys_users }}"
          loop_control:
            loop_var: authorized_keys_user
            index_var: authorized_keys_index
          no_log: "{{ authorized_keys_no_log }}"
          vars:
            authorized_keys_results: >-
              {{ authorized_keys_check_homes_base_dir_result.results }}

        - name: Setup home directories
          ansible.builtin.file:
            state: directory
            path: "{{ authorized_keys_home_dir }}"
            owner: >-
              {{ authorized_keys_user
                 | default(authorized_keys_defaults.user) }}
            mode: "0700"
          when: not authorized_keys_results[authorized_keys_index].stat.exists
          register: authorized_keys_setup_homes_result
          loop: "{{ _authorized_keys_users }}"
          loop_control:
            loop_var: authorized_keys_user
            index_var: authorized_keys_index
          no_log: "{{ authorized_keys_no_log }}"
          vars:
            authorized_keys_results: >-
              {{ authorized_keys_check_homes_result.results }}

        - name: Setup .ssh directory
          ansible.builtin.file:
            state: directory
            path: "{{ authorized_keys_home_dir }}/.ssh"
            owner: >-
              {{ authorized_keys_user
                 | default(authorized_keys_defaults.user) }}
            mode: "0700"
          when: >-
            authorized_keys_setup_homes_result.results[authorized_keys_index]
            is changed
          loop: "{{ _authorized_keys_users }}"
          loop_control:
            loop_var: authorized_keys_user
            index_var: authorized_keys_index
          no_log: "{{ authorized_keys_no_log }}"

    - name: Setup SSH authorized keys
      ansible.posix.authorized_key:
        comment: >-
          {{ authorized_keys_item.comment
             | default(authorized_keys_defaults.comment) | default(omit) }}
        exclusive: >-
          {{ authorized_keys_item.exclusive
             | default(authorized_keys_defaults.exclusive) | default(omit) }}
        follow: >-
          {{ authorized_keys_item.follow
             | default(authorized_keys_defaults.follow) | default(omit) }}
        key: >-
          {{ authorized_keys_item.key
             | default(authorized_keys_defaults.key) }}
        key_options: >-
          {{ authorized_keys_item.key_options
             | default(authorized_keys_defaults.key_options) | default(omit) }}
        manage_dir: >-
          {{ authorized_keys_item.manage_dir
             | default(authorized_keys_defaults.manage_dir) | default(omit) }}
        path: >-
          {{ authorized_keys_item.path
             | default(authorized_keys_defaults.path) | default(omit) }}
        state: >-
          {{ authorized_keys_item.state
             | default(authorized_keys_defaults.state) | default(omit) }}
        user: >-
          {{ authorized_keys_item.user
             | default(authorized_keys_defaults.user) }}
        validate_certs: >-
          {{ authorized_keys_item.validate_certs
             | default(authorized_keys_defaults.validate_certs)
             | default(omit) }}
      register: authorized_keys_setup_ssh_key_result
      failed_when:
        authorized_keys_setup_ssh_key_result.msg is defined
        and (not authorized_keys_ignore_missing_user | bool
             or (authorized_keys_ignore_missing_user | bool
                 and authorized_keys_setup_ssh_key_result.msg
                     is not search("Failed to lookup user")))
      loop: "{{ _authorized_keys_to_manage }}"
      loop_control:
        loop_var: authorized_keys_item
        index_var: authorized_keys_index
        label: >-
          {{ authorized_keys_item.user
             | default(authorized_keys_defaults.user)
             + " / "
             ~ authorized_keys_item.comment
               | default(authorized_keys_index) }}
      no_log: "{{ authorized_keys_no_log }}"
      environment:
        LANGUAGE: en_US
  vars:
    authorized_keys_home_dir: >-
      {{ authorized_keys_gather_homes_result
         .results[authorized_keys_index].stdout }}
  tags:
    - role::authorized_keys
